aqui van los archivos:
proyecto_bd2/
│── main.py                # Punto de entrada: integra frontend, parser y motor
│── requirements.txt       # Librerías necesarias (pyparsing, tkinter/pyqt, etc.)
│── Dockerfile             # Para desplegar con Docker
│── docker-compose.yml
│
├── core/                  # Núcleo del motor de base de datos
│   ├── file_manager.py    # Manejo de archivos planos, bloques, páginas
│   ├── record.py          # Definición genérica de un registro
│   ├── index_base.py      # Clase abstracta para índices
│   ├── sequential.py      # Implementación Sequential File / AVL File
│   ├── isam.py            # Implementación ISAM con overflow
│   ├── extendible_hash.py # Implementación Extendible Hashing
│   ├── bplustree.py       # Implementación de B+ Tree
│   ├── rtree.py           # Implementación de R-Tree (puede usar librería existente)
│   └── utils.py           # Funciones de apoyo (ej: serialización, I/O)
│
├── parser/                # Parser SQL
│   ├── lexer.py           # Tokenizador
│   ├── parser.py          # Convierte tokens → AST/JSON
│   ├── executor.py        # Toma AST y llama a los índices adecuados
│   └── grammar.ebnf       # Gramática definida (si usas Lark/pyparsing)
│
├── frontend/              # Interfaz gráfica
│   ├── gui.py             # GUI principal (ej. Tkinter/PyQt)
│   ├── views/             # Pantallas específicas
│   └── components/        # Widgets reutilizables
│
├── data/                  # Archivos de prueba
│   ├── restaurantes.csv
│   └── ...
│
├── tests/                 # Pruebas unitarias
│   ├── test_parser.py
│   ├── test_bplustree.py
│   ├── test_isam.py
│   ├── test_hash.py
│   └── test_end_to_end.py # Flujo completo: SQL → ejecución → resultados
│
└── docs/                  # Informe técnico
    ├── informe.tex / md
    ├── figuras/
    └── video_demo.mp4

algo asi seria la estructura, el fronted ya esta terminado, falta conectar.